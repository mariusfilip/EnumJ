/*
 * The MIT License
 *
 * Copyright 2015 Marius Filip.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package enumj;

import java.util.Iterator;
import java.util.PrimitiveIterator;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * Pipe processor that flattens sub-iterators
 * generated by mapping enumerated elements.
 *
 * @param <TIn> input value mapped to an {@link Iterator}.
 * @param <TOut> output value from the generated sub-iterator.
 * @see MapPipeProcessor
 * @see ZipPipeProcessor
 */
final class FlatMapPipeProcessor<TIn,TOut>
            extends AbstractPipeMultiProcessor<TIn,TOut> {

    private final int                          type;
    private final Function<TIn,Iterator<TOut>> mapper;
    private final Nullable<TOut>               value;
    private final Iterator[]                   iterators;

    private final Consumer<Iterator> get       = this::getNextValue;
    private final Consumer<Iterator> getInt    = this::getNextIntValue;
    private final Consumer<Iterator> getLong   = this::getNextLongValue;
    private final Consumer<Iterator> getDouble = this::getNextDoubleValue;
    private final Consumer[] getters = {
        get,
        getInt,
        getLong,
        getDouble
    };

    /**
     * Constructs a {@code FlatMapPipeProcessor} instances.
     * <p>
     * The new {@link FlatMapPipeProcessor} stores its mapper internally.
     * </p>
     *
     * @param mapper {@link Function} instance mapping input elements to
     * sub-iterators.
     */
    public FlatMapPipeProcessor(Function<TIn,Iterator<TOut>> mapper,
                                int                          valueType) {
        super(true, true);
        this.type = valueType;
        this.mapper = mapper;
        this.iterators = new Iterator[Value.DOUBLE-Value.GENERIC+1];
        this.value = Nullable.empty();
    }

    @Override public boolean needsValue() {
        return !value.isPresent();
    }
    @Override public void processInputValue(In<TIn> value) {
        this.clearIt();
        final Iterator<TOut> it = this.iterators[this.type]
                                = this.mapper.apply(value.get());
        if (it != null && it.hasNext()) {
            final Consumer<Iterator<TOut>> getter = this.getters[this.type];
            getter.accept(it);
        } else {
            this.value.clear();
        }
    }
    @Override public boolean hasOutputValue() {
        return value.isPresent();
    }
    @Override public void getOutputValue(Out<TOut> value) {
        value.setValue(this.value);
        final Iterator<TOut> it = this.iterators[this.type];
        if (it.hasNext()) {
            final Consumer<Iterator<TOut>> getter = getters[this.type];
            getter.accept(it);
        } else {
            this.value.clear();
            this.clearIt();
        }
    }
    @Override public boolean isInactive() {
        return false;
    }

    private void clearIt() {
        for(int i=0; i<this.iterators.length; ++i) {
            this.iterators[i] = null;
        }
    }
    private void getNextValue(Iterator it) {
        final Iterator<TOut> iter = (Iterator<TOut>)it;
        this.value.set(iter.next());
    }
    private void getNextIntValue(Iterator it) {
        final PrimitiveIterator.OfInt iter = (PrimitiveIterator.OfInt)it;
        this.value.setInt(iter.nextInt());
    }
    private void getNextLongValue(Iterator it) {
        final PrimitiveIterator.OfLong iter = (PrimitiveIterator.OfLong)it;
        this.value.setLong(iter.nextLong());
    }
    private void getNextDoubleValue(Iterator it) {
        final PrimitiveIterator.OfDouble iter = (PrimitiveIterator.OfDouble)it;
        this.value.setDouble(iter.nextDouble());
    }
}
